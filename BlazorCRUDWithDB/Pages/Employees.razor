@page "/employees"
@inject BlazorCRUDWithDB.Services.EmployeeService EmployeeService

<h3>Employee Manager (DB)</h3>

<input class="form-control mb-3" placeholder="Search by name..." @bind="searchTerm" @bind:event="oninput" />

@if (!string.IsNullOrEmpty(statusMessage))
{
        <div class="alert alert-success">@statusMessage</div>
}

@if (editing)
{
        <EditForm Model="editEmployee" OnValidSubmit="SaveEmployee">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <InputText @bind-Value="editEmployee.Name" placeholder="Name" class="form-control mb-2" />
            <InputText @bind-Value="editEmployee.Department" placeholder="Department" class="form-control mb-2" />
            <InputText @bind-Value="editEmployee.Email" placeholder="Email" class="form-control mb-2" />

            <button type="submit" class="btn btn-primary">Save</button>
            <button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">Cancel</button>
        </EditForm>
}
else
{
        <button class="btn btn-success mb-3" @onclick="CreateNew">Add New Employee</button>

        <table class="table table-striped">
            <thead>
                <tr>
                               <th @onclick="@(() => SortBy("Name"))">
                Name @(sortColumn == "Name" ? (sortAscending ? "↑" : "↓") : "")
            </th>
            <th @onclick="@(() => SortBy("Department"))">
                Department @(sortColumn == "Department" ? (sortAscending ? "↑" : "↓") : "")
            </th>
            <th @onclick="@(() => SortBy("Email"))">
                Email @(sortColumn == "Email" ? (sortAscending ? "↑" : "↓") : "")
            </th>



                </tr>
            </thead>
            <tbody>
            @foreach (var emp in PagedEmployees)
            {
                        <tr>
                            <td>@emp.Name</td>
                            <td>@emp.Department</td>
                            <td>@emp.Email</td>
                            <td>
                                <button class="btn btn-sm btn-warning me-1" @onclick="() => Edit(emp.Id)">Edit</button>
                                <button class="btn btn-sm btn-danger" @onclick="() => Delete(emp.Id)">Delete</button>
                            </td>
                        </tr>
            }
            </tbody>
        </table>

        <div class="mt-3">
            <button class="btn btn-secondary me-2" @onclick="PrevPage" disabled="@(currentPage == 1)">Previous</button>
            Page @currentPage of @TotalPages
            <button class="btn btn-secondary ms-2" @onclick="NextPage" disabled="@(currentPage == TotalPages)">Next</button>
        </div>
}

@code {
    string statusMessage = string.Empty;
    List<BlazorCRUDWithDB.Models.Employee> employees = new();
    BlazorCRUDWithDB.Models.Employee editEmployee = new();
    bool editing = false;

    string searchTerm = "";
    int currentPage = 1;
    int pageSize = 5;
    string sortColumn = "Name";
    bool sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        employees = await EmployeeService.GetAllAsync();
    }

    IEnumerable<BlazorCRUDWithDB.Models.Employee> FilteredEmployees =>
        employees.Where(e =>
            string.IsNullOrWhiteSpace(searchTerm) ||
            e.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));

    IEnumerable<BlazorCRUDWithDB.Models.Employee> SortedEmployees =>
        sortColumn switch
        {
            "Name" => sortAscending ? FilteredEmployees.OrderBy(e => e.Name) : FilteredEmployees.OrderByDescending(e => e.Name),
            "Department" => sortAscending ? FilteredEmployees.OrderBy(e => e.Department) : FilteredEmployees.OrderByDescending(e => e.Department),
            "Email" => sortAscending ? FilteredEmployees.OrderBy(e => e.Email) : FilteredEmployees.OrderByDescending(e => e.Email),
            _ => FilteredEmployees
        };

    IEnumerable<BlazorCRUDWithDB.Models.Employee> PagedEmployees =>
        SortedEmployees.Skip((currentPage - 1) * pageSize).Take(pageSize);

    int TotalPages => (int)Math.Ceiling((double)FilteredEmployees.Count() / pageSize);

    void NextPage() => currentPage = currentPage < TotalPages ? currentPage + 1 : currentPage;
    void PrevPage() => currentPage = currentPage > 1 ? currentPage - 1 : currentPage;

    void SortBy(string column)
    {
        if (sortColumn == column)
            sortAscending = !sortAscending;
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
        currentPage = 1;
    }

    void CreateNew()
    {
        editEmployee = new BlazorCRUDWithDB.Models.Employee();
        editing = true;
    }

    async void Edit(int id)
    {
        editEmployee = await EmployeeService.GetByIdAsync(id);
        editing = true;
    }

    async void Delete(int id)
    {
        await EmployeeService.DeleteAsync(id);
        employees = await EmployeeService.GetAllAsync();
        await ShowStatusMessage("Employee deleted successfully!");
    }

    async Task SaveEmployee()
    {
        if (editEmployee.Id == 0)
        {
            bool exists = await EmployeeService.EmployeeExistsAsync(editEmployee.Name);
            if (exists)
            {
                await ShowStatusMessage("An employee with this name already exists.");
                return;
            }

            await EmployeeService.AddAsync(editEmployee);
            await ShowStatusMessage("Employee added successfully!");
        }
        else
        {
            await EmployeeService.UpdateAsync(editEmployee);
            await ShowStatusMessage("Employee updated successfully!");
        }

        employees = await EmployeeService.GetAllAsync();
        editing = false;
        StateHasChanged();
    }

    void Cancel()
    {
        editing = false;
    }

    async Task ShowStatusMessage(string message)
    {
        statusMessage = message;
        StateHasChanged();
        await Task.Delay(3000);
        statusMessage = string.Empty;
        StateHasChanged();
    }
}
